/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.micromanager.rapp.MultiFOV;


import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import mmcorej.CMMCore;

/**
 *
 * @author Frederik
 */
public class XYZPanel extends javax.swing.JPanel {
    private BLframe parent_;
    private CMMCore core_;
    private static final XYZPanel fINSTANCE =  new XYZPanel();
    public static FOVTableModel tableModel_;
    JTable fovTable_;
    WellClass pp_;
    wellMap wMap_;
    int genMode = 0;
    
    
    /**
     * Creates new form XYZPanel
     */
    public XYZPanel() {
        initComponents();
        setControlDefaults();
        pp_ = WellClass.getInstance();
        wMap_ = wellMap.getInstance();
    }
    public static XYZPanel getInstance() {
            return fINSTANCE;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SelectFOVsBottom = new javax.swing.JButton();
        StartFOVField = new javax.swing.JTextField();
        StopFOVField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fovTablePanel = new javax.swing.JPanel();
        fullWellCombo = new javax.swing.JComboBox();
        deleteFOVsButton = new javax.swing.JButton();

        SelectFOVsBottom.setText("Add FOVs");
        SelectFOVsBottom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectFOVsBottomActionPerformed(evt);
            }
        });

        StartFOVField.setText("A1");
        StartFOVField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartFOVFieldActionPerformed(evt);
            }
        });

        StopFOVField.setText("C3");
        StopFOVField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopFOVFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("From");

        jLabel4.setText("to");

        fovTablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Stored xyz positions"));

        javax.swing.GroupLayout fovTablePanelLayout = new javax.swing.GroupLayout(fovTablePanel);
        fovTablePanel.setLayout(fovTablePanelLayout);
        fovTablePanelLayout.setHorizontalGroup(
            fovTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 261, Short.MAX_VALUE)
        );
        fovTablePanelLayout.setVerticalGroup(
            fovTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 229, Short.MAX_VALUE)
        );

        fullWellCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Full well", "single FOV" }));
        fullWellCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullWellComboActionPerformed(evt);
            }
        });

        deleteFOVsButton.setText("Delete all FOVs");
        deleteFOVsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFOVsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SelectFOVsBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteFOVsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(4, 4, 4)
                .addComponent(fullWellCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StartFOVField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StopFOVField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fovTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SelectFOVsBottom)
                            .addComponent(StartFOVField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StopFOVField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(fullWellCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteFOVsButton))
                    .addComponent(fovTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void StopFOVFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopFOVFieldActionPerformed
        String input = StopFOVField.getText();
        input = input.toUpperCase();
        StopFOVField.setText(input);
    }//GEN-LAST:event_StopFOVFieldActionPerformed

    private void SelectFOVsBottomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectFOVsBottomActionPerformed
     
        String startF = StartFOVField.getText().toUpperCase();
        StartFOVField.setText(startF);
        int startCol = xyzFunctions.getWellCol(startF);
        int startRow = xyzFunctions.getWellRow(startF);
        String stopF = StopFOVField.getText().toUpperCase();
        StopFOVField.setText(stopF);
        int stopCol = xyzFunctions.getWellCol(stopF);
        int stopRow = xyzFunctions.getWellRow(stopF);

        int dCol = stopCol - startCol+1;
        int dRow = stopRow - startRow+1;
        pp_.getFirstWellOffX();
        genMode = fullWellCombo.getSelectedIndex();
        ArrayList<FOV> preFovs = new ArrayList<FOV>(tableModel_.getData());
        tableModel_.clearAllData();
        ArrayList<FOV> fovs=xyzFunctions.generateFOVs(dCol, dRow, startCol, startRow, genMode);
        fovs = xyzFunctions.concatLists(preFovs, fovs);
        fovs = xyzFunctions.sortList(fovs);
        tableModel_.addWholeData(fovs);
    //    wMap_.drawFromOutsideClass(startCol, stopCol, startRow, stopRow);
        
    }//GEN-LAST:event_SelectFOVsBottomActionPerformed

    private void StartFOVFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartFOVFieldActionPerformed
         String input = StartFOVField.getText();
         input = input.toUpperCase();
         StartFOVField.setText(input);
    }//GEN-LAST:event_StartFOVFieldActionPerformed

    private void fullWellComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullWellComboActionPerformed
        genMode = fullWellCombo.getSelectedIndex();
        xyzFunctions.genMode = genMode;
    }//GEN-LAST:event_fullWellComboActionPerformed

    private void deleteFOVsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFOVsButtonActionPerformed
       tableModel_.clearAllData();
       wMap_.repaint();
       
    }//GEN-LAST:event_deleteFOVsButtonActionPerformed

        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SelectFOVsBottom;
    private javax.swing.JTextField StartFOVField;
    private javax.swing.JTextField StopFOVField;
    private javax.swing.JButton deleteFOVsButton;
    private javax.swing.JPanel fovTablePanel;
    public javax.swing.JComboBox fullWellCombo;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

    private void setControlDefaults() {
        tableModel_ = new FOVTableModel(pp_);
//        searchFOVtableModel_ = new FOVTableModel(pp_); //Not sure if this is the best way, but try it for now.
        tableModel_.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {

            }
        });

        fovTable_ = new JTable();
        fovTable_.setModel(tableModel_);
        fovTable_.setSurrendersFocusOnKeystroke(true);
        fovTable_.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
//        fovTable_.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        fovTable_.getColumnModel().getColumn(0).setPreferredWidth(40);
//        fovTable_.getColumnModel().getColumn(1).setPreferredWidth(40);
//        fovTable_.getColumnModel().getColumn(2).setPreferredWidth(40);
//        fovTable_.getColumnModel().getColumn(3).setPreferredWidth(40);

        JScrollPane scroller = new javax.swing.JScrollPane(fovTable_);
        fovTable_.setPreferredScrollableViewportSize(new java.awt.Dimension(160, 160));
        fovTablePanel.setLayout(new BorderLayout());
        fovTablePanel.add(scroller, BorderLayout.CENTER);

        final JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem("Delete FOV");
        deleteItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int r = fovTable_.getSelectedRow();
                tableModel_.removeRow(r);
            }
        });
        JMenuItem addItem = new JMenuItem("Add FOV");
        addItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int r = fovTable_.getSelectedRow();
                tableModel_.insertRow(r, new FOV(0,0,0,"A1"));
            }
        });
//        JMenuItem goToFOVItem = new JMenuItem("Go to FOV");
//        goToFOVItem.addActionListener(new ActionListener() {
//
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                int r = fovTable_.getSelectedRow();
////                FOV fov = tableModel_.getData().get(r);
//                xyzmi_.gotoFOV(tableModel_.getData().get(r));
//                if (!zAsOffset_){
//                    double zval = tableModel_.getData().get(r).getZ();
//                    xyzmi_.moveZAbsolute(zval);
//                }
//                else {
//                    // obviously, this isn't quite right - we want to get
//                    // the offset of the CURRENT FOV (perhaps from parent in 
//                    // later implementations?) and subtract from that of the 
//                    // NEWLY SELECTED FOV. 
//                    // TODO: fix for proper zAsOffset behaviour. 
//                    // Wait for move completion
//                    while (xyzmi_.isStageBusy()){
//                       System.out.println("Stage moving...");
//                    };    
//                    
//                    if(parent_.checkifAFenabled()){
//                        // If we have gone to the FOV, and have AF, do AF
//                        xyzmi_.customAutofocus(parent_.getAFOffset());
//                    } else {
//                        // If we don't have AF, go to the 'good offset position'
//                        xyzmi_.moveZAbsolute(parent_.getFixedAFDefault());
//                    }
//                    //Now do the relative shift
//                    xyzmi_.moveZRelative(tableModel_.getData().get(r).getZ());
//                    System.out.println("Z value"+tableModel_.getData().get(r).getZ());
//                }
//            }
//        });
        
        popupMenu.add(addItem);
        popupMenu.add(deleteItem);
        //popupMenu.add(goToFOVItem);

        fovTable_.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
//                System.out.println("pressed");
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    JTable source = (JTable) e.getSource();
                    int row = source.rowAtPoint(e.getPoint());
                    int column = source.columnAtPoint(e.getPoint());

                    if (!source.isRowSelected(row)) {
                        source.changeSelection(row, column, false, false);
                    }
                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });
    }
}
